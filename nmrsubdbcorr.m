function [subdbcorr,subtest,subref] = nmrsubdbcorr(dbcorr,substancetest,substanceref)
% NMRSUBDBCORR extracts dbcorr data (output of NMRLOADMATRIX) according to chosen test substances (in row) and reference substances (in column)
% SYNTAXES
%       subdbcorr = nmrsubdbcorr(dbcorr,{'mol1' 'mol2'},{'mol3' 'mol4'})
%       [subdbcorr,subref] = nmrsubdbcorr(dbcorr,[1 5 10],[1:10])
% INPUTS
%        DBCORR : matrix of correlation (corr. function) generated by NMRLOADMATRIX
%  substancetest: list of test substances to be extracted (pattern), in row 
%                 - 1 x m cell {'mol1' 'mol2'}, extract data of substances having names 'mol1' and 'mol2'. Dupplicate names are not allowed
%                 - 1: m array [1 5], extract data of substances having indices 1 and 5; Duplicate indices are possible
%   substanceref: list of ref substances to be extracted, in column
%                 - ' ' : empty, extract the same substances as ref substances (default)
%                 - 1 x n cell {'mola' 'molb'}, extract data of substances having names 'mola' and 'molb'
%                 - 1 x n [1 5], extract data of substances (or mixtures) having indices 1 and 5
% 
% See also: nmrloadmatrix
%
% RMNSPEC v 0.1 - 02/09/2013 - INRA\Olivier Vitrac, LNE\Mai Nguyen - rev. 13/11/13
% 13/11/13 add options to call subtances to be extracted by name
%
% argcheck
if nargin < 2, error('2 arguments are required'), end
if nargin < 3, substanceref = {}; end
if ~isstruct(dbcorr) || ~isfield(dbcorr,'corrmax') || ~isfield(dbcorr,'corrzerolag') || ~isfield(dbcorr,'rho2') || ~isfield(dbcorr,'subtestlist') || ~isfield(dbcorr,'subreflist') || ~isfield(dbcorr,'weight')    
    error('DBCORR must be created by NMRLOADMATRIX')
end

fulllistofsubstancetest = {dbcorr(:,1).subtestlist}; % as dbcorr structure is N substancetest x M subtanceref
fulllistofsubstanceref = {dbcorr(1,:).subreflist}; % as dbcorr structure is N substancetest x M subtanceref

% check list of test subtances, pattern (in row)
%   -> check if inputs are numeric or cell of string
%   -> set indices of substances
if iscellstr(substancetest)     % list of subs test is string
    nsubstancetest = length(substancetest);
    if nsubstancetest > length(unique(substancetest)), error('substance keys must be unique, please check'), end
    [~,indsubtest] = intersect(fulllistofsubstancetest,substancetest);
    if length(indsubtest) < nsubstancetest
        dispf('ERROR\t%d values given as substance keys cannot be found',nsubstancetest-length(indsubtest))
        cellfun(@(m) dispf('\t''%s'' is missing',m),setdiff(substancetest,fulllistofsubstancetest))
        error('%d missing values (see above)',nsubstancetest-length(indsubtest))
    end
elseif isnumeric(substancetest)  % list of subs test is numeric (indices)
    if max(substancetest) > size(dbcorr,1), error('index of test substances is out of range'), end
    indsubtest = substancetest;
    %error('the indices of test subtances must be numerical values'), end
end

% check list of ref subtances (in column)
%   -> check if inputs are numeric or cell of string
%   -> set indices of substances
if ~isempty(substanceref)
    if iscellstr(substanceref) % list of subs test is string
        nsubstanceref = length(substanceref);
        if nsubstanceref > length(unique(substanceref)), error('substance keys must be unique, please check'), end
        [~,indsubref] = intersect(fulllistofsubstanceref,substanceref);
        if length(indsubref) < nsubstanceref
            dispf('ERROR\t%d values given as substance keys cannot be found',nsubstanceref-length(indsubref))
            cellfun(@(m) dispf('\t''%s'' is missing',m),setdiff(substanceref,fulllistofsubstanceref))
            error('%d missing values (see above)',nsubstanceref-length(indsubref))
        end
    elseif isnumeric(substanceref)
        if max(substanceref) > size(dbcorr,2), error('index of ref substances is out of range'), end
        indsubref = substanceref;
    end
else   % no list of subs test
    indsubref = indsubtest;  
end

% extract database of corr
subdbcorr = dbcorr(indsubtest,indsubref);

if nargout > 1, subtest = {subdbcorr(:,1).subtestlist}; end
if nargout > 2, subref = {subdbcorr(1,:).subreflist}; end