function addzplotpub(hplot,zvalues,zscale)
%ADDZPLOTPUB add z values (depth) to 1D plots generated by PLOTPUB (usefull with spectra)
%   syntax: addzplotpub(hp [,zvalues, zscale])
%       hp: handle object created with PLOTPUB (1xm structure array)
%        >> plots can belong to different axes
%       zvalues: 1xm vector of z values (default=0:m-1)
%       zscale: 'linear' (default), 'log')
%       NOTE that z-axis and y-axis are in fact swapped (use zlabel to label prior y-axis), x-axis is unchanged.
%
%   see also: plotpub, legendpub, deleteplotpub
%
%   TODO LIST: the reverse transformation (not required)

% MS 2.0 - 31/08/07 - Olivier Vitrac - rev.

% history

% default values
zscale_default = 'linear';
defaultview = [10 20];

% arg check
if nargchk(1,3,nargin), error('syntax: addzplotpub(hp [,zvalues, zscale])'), end
if ~isstruct(hplot) || ~isfield(hplot,'leg') || ~isfield(hplot,'line') || ~isfield(hplot,'marker') || ~isfield(hplot,'text')
    error('invalid handle object, hplot must be created with PLOTPUB')
end
m = numel(hplot); if m<1, error('empty hplot'), end
if nargin<2, zvalues = []; end
if nargin<3, zscale = []; end
if isempty(zvalues), zvalues = 0:m-1; end
if numel(zvalues)~=m, error('the length of hplot [%d] does not match the number of zvalues [%d]',m,numel(zscale)), end
if isempty(zscale), zscale = zscale_default; end
if ~ismember(zscale,{'linear' 'log'}), error('''%s'' is an invalid value for ''zscale''',zscale), end
units = 'data';

% set z values
hdone = [];
parentdone = [];
for i=1:length(hplot)
    for f=fieldnames(hplot)'
        h = hplot(i).(f{1});
        if any(h)
            for j=1:length(h)
                if ishandle(h(j)) && ~ismember(h(j),hdone)
                    if strcmp(get(h(j)),'text') % text object
                        oldunits = get(h(j),'units');
                        isnew = strcmp(oldunits,units);
                        if ~isnew, set(h(j),'units',units), end
                        position = get(h(j),'position');
                        set(h(j),'position',[position(1) zvalues(i) position(2)])
                        if ~isnew, set(h(j),'units',oldunits), end
                    else
                        ydata = get(h(j),'Ydata');
                        [r,c] = size(ydata);
                        set(h(j),'Ydata',zvalues(i)*ones(r,c),'Zdata',ydata)
                    end
                    hdone(end+1) = h(j);
                end
            end
            parent = get(h(j),'parent');
            if strcmp(get(parent,'type'),'axes') && ~ismember(parent,parentdone)
                [yprop,zprop] = swapaxprop(getaxprop(parent,'z'),getaxprop(parent,'y'));              
                setprop(parent,yprop);
                setprop(parent,zprop);
                set(parent,'yscale',zscale,'ylim',[min(zvalues) max(zvalues)],'yticklabelmode','auto','ytickmode','auto')
                parentdone(end+1) = parent;
                view(defaultview)
            end
        end
    end
end
%14 34

%%%%%%%%%%%%%%%%%%%%%%%
%  private functions
%%%%%%%%%%%%%%%%%%%%%%%
function p = getaxprop(h,coord)
% retrieve general properties of axes h along coord  'x', 'y' or 'z'
p = getprop(h,[coord 'scale'],[coord 'tick'],[coord 'lim'],[coord 'ticklabel'],[coord 'ticklabelmode'],[coord 'tickmode']);

function [p1,p2]=swapaxprop(p1,p2)
% swap content between structure p1 and p2 (assume that all fields are in the same order and with similar meaning)
f1 = fieldnames(p1);
f2 = fieldnames(p2);
for i=1:length(f1)
    tmp = p1.(f1{i});
    p1.(f1{i}) = p2.(f2{i});
    p2.(f2{i}) = tmp;
end