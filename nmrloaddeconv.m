function [W,indmol] = nmrloaddeconv(dbcorrsub,dbcorrmix,varargin)
%NMRLOADDECONV use lsqnonneg for deconvolution of NMR spectra from correlation matrix calculated by NMRLOADMATRIX
% SYNTAXES
%       W = nmrloaddeconv(dbcorrsub,dbcorrmix,'nmoltest',10)
% INPUTS
%           DBCORRSUB: n x m matrix of correlation (corr. function) between substances generated by NMRLOADMATRIX
%                      matrix is organized in rang of insertion of substances (1st row = 1st inserted substance)
%           DBCORRMIX: n x 1 matrix of correlation (corr. function) between substances and mixture(s) generated by NMRLOADMATRIX
%                      matrix is organized in rang of insertion of substances
%  VARARGIN
%            nmoltest: numeric, number of inserted substances in deconvolution procedure (default = [] = size(dbcorrsub,1)
%           proximity: n x 1 array, rang of susbtances by proximity (by calculation of clustering) (default = [], no ranking by proximity)
% 
% EXAMPLE
% dataclass = load(fullfile(find_path_toolbox('rmnspec'),'data_pur','dendrogram_T_worse.mat')); %confusion matrix
% class = dataclass.Tw(:,15); % number of class is, here, 15
% rang = class(indsubtest);


% See also: nmrloadmatrix, nmrsubdbcorr
%
% RMNSPEC v 0.1 - 04/12/2013 - INRA\Olivier Vitrac, LNE\Mai Nguyen - rev. 
%
% history
%
% default
default = struct('nmoltest',[],'proximity',[]);
% argcheck
o = argcheck(varargin,default);
if nargin < 2, error('At least 2 argument is required'), end
if ~isstruct(dbcorrsub) || ~isfield(dbcorrsub,'corrmax') || ~isfield(dbcorrsub,'corrzerolag') || ~isfield(dbcorrsub,'rho2') || ~isfield(dbcorrsub,'subtestlist') || ~isfield(dbcorrsub,'subreflist')    
    error('DBCORRSUB must be created by NMRLOADMATRIX')
end
if ~isstruct(dbcorrmix) || ~isfield(dbcorrmix,'corrmax') || ~isfield(dbcorrmix,'corrzerolag') || ~isfield(dbcorrmix,'rho2') || ~isfield(dbcorrmix,'subtestlist') || ~isfield(dbcorrmix,'subreflist')    
    error('DBCORRMIX must be created by NMRLOADMATRIX')
end
if size(dbcorrsub,1) ~=  size(dbcorrmix,1), error('DBCORRSUB and DBCORRMIX must have a same size (fisrt direction, in row)'), end
if size(dbcorrmix,2) > 1, warning('Only first mixture will be studied'), dbcorrmix = dbcorrmix(:,1); end
if isempty(o.nmoltest), o.nmoltest = size(dbcorrsub,1); end
if ~isempty(o.proximity)
    rang = o.proximity(:);
    tmp = intersect(find(diff([-inf;rang-(1:o.nmoltest)'*0;inf])),find([diff(rang);inf]==0)); % index of 1st mol belogging for the same class
    splitsize = diff(find(diff([-inf;rang-(1:o.nmoltest)'*0;inf]))); splitsize = splitsize(splitsize>1); %length in each class
    indmolsameclass = cell(length(splitsize),1);
    for i = 1:length(splitsize)
        indmolsameclass{i} = tmp(i):1:tmp(i)+splitsize(i)-1;
    end 
end

% main
if ~isempty(o.proximity)
    W = cell(o.nmoltest,1); % result of lisqnonneg for all mixtures
    indmol = cell(o.nmoltest,1);
    i = 1;
    while i <= o.nmoltest    
        classtoused = [];
        indclasstoused = ~cellfun(@isempty, arrayfun(@(j) intersect(i,indmolsameclass{(j)}),1:length(splitsize),'UniformOutput',false));
        if sum(indclasstoused)>0, classtoused = indmolsameclass{indclasstoused}; end     
        if  ~isempty(classtoused)
            if i == classtoused(end)
                indmol{i} = (1:i)';
                dbcsub = dbcorrsub(indmol{i},indmol{i});
                dbcmix = dbcorrmix(indmol{i},:);        
                W{i} = lsqnonneg(cell2mat(reshape({dbcsub.corrmax},size(dbcsub))),cell2mat(reshape({dbcmix.corrmax},size(dbcmix)))); 
                i = i+1;
            else
                circperms = perms(classtoused); % circular permutation between subs in the same class
                for ichose = 1:length(classtoused)-1
                    permstmp = unique(sort(circperms(:,1:ichose),2),'rows'); % chose 2:n-1 between n substances, unique(circperms(:,1:ichose),'rows')  circperms(:,1:2), sort(acircperms(:,1:2)')'
                    Wtmp = zeros(i,size(permstmp,1));
                    moltmp = zeros(i,size(permstmp,1));
                    for j = 1:size(permstmp,1)
                        moltmp(:,j) = unique([1:i-ichose permstmp(j,:)]);
                        dbcsub = dbcorrsub(moltmp(:,j),moltmp(:,j));
                        dbcmix = dbcorrmix(moltmp(:,j),:);        
                        Wtmp(:,j) = lsqnonneg(cell2mat(reshape({dbcsub.corrmax},size(dbcsub))),cell2mat(reshape({dbcmix.corrmax},size(dbcmix))));
                    end
                    W{i} = Wtmp;
                    indmol{i} = moltmp;
                    i = i+1;
                end              
            end
        else
            dbcsub = dbcorrsub(1:i,1:i);
            dbcmix = dbcorrmix(1:i,:);
            W{i} = lsqnonneg(cell2mat(reshape({dbcsub.corrmax},size(dbcsub))),cell2mat(reshape({dbcmix.corrmax},size(dbcmix))));
            indmol{i} = (1:i)';
            i = i+1;
        end
    end
else
    W = zeros(o.nmoltest,o.nmoltest,1); % result of lisqnonneg for all mixtures
    indmol = zeros(o.nmoltest,o.nmoltest,1);
    W(:) = NaN; indmol(:) = NaN;
    for i = 1:o.nmoltest   
        dbcsub = dbcorrsub(1:i,1:i);
        dbcmix = dbcorrmix(1:i,:);
        W(1:i,i) = lsqnonneg(cell2mat(reshape({dbcsub.corrmax},size(dbcsub))),cell2mat(reshape({dbcmix.corrmax},size(dbcmix))));
        indmol(1:i,i) = 1:i;
    end
end

% circperms = setdiff(perms(1:nmolsameclass),1:nmolsameclass,'rows');
% circperms = [1:nmolsameclass;circperms];
% if length(classtoused)>2
% else permstmp = unique(sort(circperms(:,1:1),2),'rows'); % chose 2:n-1 between n substances, unique(circperms(:,1:ichose),'rows')  circperms(:,1:2), sort(acircperms(:,1:2)')'
%     Wtmp = zeros(i,size(permstmp,2));
%     moltmp = zeros(i,size(permstmp,2));
%     for j = 1:size(permstmp,1)
%         moltmp(:,j) = [1:i-1 permstmp(j,:)];
%         dbcsub = dbcorrsub(moltmp(:,j),moltmp(:,j)); %,:));,:)
%         dbcmix = dbcorrmix(moltmp(:,j),:); % ,:)         
%         Wtmp(:,j) = lsqnonneg(cell2mat(reshape({dbcsub.corrmax},size(dbcsub))),cell2mat(reshape({dbcmix.corrmax},size(dbcmix))));
%     end
%     W{i} = Wtmp;
%     indmol{i} = moltmp;
%     i = i+1;
% end